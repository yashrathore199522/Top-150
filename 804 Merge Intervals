Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
// TC O(nlogN) + O(n)
//SC O(n)
class Solution {
    public int[][] merge(int[][] intr) {
        
        Arrays.sort(intr , (a,b)->a[0]-b[0]);
        
        int a  = intr[0][0];
         int b  = intr[0][1];
        int i=0,j=0;
     
        LinkedList<int[]> chk = new LinkedList<>();
            for(int arr[] : intr){
            if(arr[0]<=b) {
                b=Math.max(arr[1],b);
            }
                else{
             
                    chk.add(new int[]{a,b});
                    i++;
                    a=arr[0];
                    b=arr[1];
                }
            
        }
        chk.add(new int[]{a,b});
        
        return chk.toArray(new int[0][]);
    }
}
