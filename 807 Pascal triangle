// given row number and column nm , find the element at that , r-1 C c-1

O(n2) normal printing pascal triangle 


class Solution {
    public List<List<Integer>> generate(int n) {
        List<List<Integer>> res= new LinkedList<List<Integer>>();
        List<Integer> tmp = new LinkedList<Integer>();
        
        if(n==0){
            return res;
        }
        if(n==1){
            tmp.add(1);
            res.add(tmp);
            return res;
        }
        
        tmp.add(1);
        res.add(tmp);
        
        int i =2;
        
        while(i<=n){
            List<Integer> tmp2 = new LinkedList<Integer>();
            tmp2.add(1);
            
            int j=1;
            
            while(j<i-1){
                
              tmp2.add(j,(res.get(i-2).get(j-1)+res.get(i-2).get(j)));
                j++;
            }
            tmp2.add(1);
            res.add(tmp2);
            i++;
            
        }
        return res;
    }
                       

}




to print all the elements of a certain row

we can calculate r-1 C c-1 , but it will cot us o(n2) so , seeing the sequence

     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]

element 1 -- 5-1 C 0 , --1.   -- 
2 ----     4 C 1. - 4.          -- 4/1
3---       4 C 2. -- 6          --- 4*3/1*2
4 ---      4 C 3.  --- 4        --- 4*3*2 / 1*2*3

check seq  this can be done in O(n)
