i/p - 1 3 2 2 4 , o/p - 2 (only one duplicate) -- in O(n) time and O(1) space : with O(n) space -- use a new array having index and increment to 1 for a number 

eg number 1 goes to index 1 , nu 3 goes to index 3 (if already 1 is there for that index we got the duplicate)

but in O(1) space 

// using fast and slow pointers:

class Solution {
    public int findDuplicate(int[] nums) {

        int slow =nums[0];
        int fast = nums[0];
        
        do{
            slow=nums[slow];
            fast = nums[nums[fast]];
        }while(slow!=fast);
        
            // now start fast from start to get the colliding point
    fast = nums[0];
      while(slow!=fast)
       {
            slow = nums[slow];
            fast = nums[fast];
            
        }
        
        return fast;
}
}
