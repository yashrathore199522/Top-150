voting algorithm 

// 1 1 1 3 3 2 2 2 , op 1 , 2
// n1 n2 (can only be max 2 nos greater than n/3 in an array), c1 c2

// extension of n/2 
// 1(n1) - 3 (c1)
// 3(n2) -2 (c2)
// majorty elem cannot be 0

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> res = new LinkedList<>();
        int n1 = -1;
        int n2 = -1;
        int c1 = 0;int c2 = 0;
        
        
        
        for(int i =0;i<nums.length;i++){
            
            if(n1==nums[i]){
                c1=c1+1;
            }
            else if(n2==nums[i]){
                c2=c2+1;
            }
            else if(c1==0){
                n1=nums[i];
                c1=1;
            }
            
            else if(c2==0){
                n2=nums[i];
                c2=1;
            }
            else{
                c1=c1-1;
                c2=c2-1;
            }
            
        }
        int a=0,b=0;
        
        for(int i =0;i<nums.length;i++){
            if(nums[i]==n1)
                a++;
            if(nums[i]==n2)
                b++;
        }
        if(a>(nums.length/3) && n1!=-1)
            res.add(n1);
        if(b>(nums.length/3))
            res.add(n2);
        
        return res;
    }
}
